Time complexity : O(n). We traverse the list containing nn elements only once. 
		Each look up in the table costs only O(1) time.

Space complexity : O(n). The extra space required depends on the number of items stored in the hash table, 
which stores at most n elements.

Rate this article:

class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        d = {}
        for index, number in enumerate(nums):
            m = target - number
            if m in d:
                return [d[m], index]
            else:
                d[number] = index
Time complexity : O(nlgn)

Other than the sort invocation, we do a simple linear scan of the list, so the runtime is dominated by the O(nlgn)
complexity of sorting.

Space complexity : O(1) (or O(n))

If we can sort intervals in place, we do not need more than constant additional space. 
Otherwise, we must allocate linear space to store a copy of intervals and sort that.


/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    private class IntervalComparator implements Comparator<Interval> {
        @Override
        public int compare(Interval a, Interval b){
            return a.start < b.start ? -1 : a.start == b.start ? 0 : 1;
        }
    }
    
    public List<Interval> merge(List<Interval> intervals) {
        Collections.sort(intervals,new IntervalComparator());
        LinkedList<Interval> merged = new LinkedList<Interval>();
        for(Interval interval : intervals){
            if(merged.isEmpty() || merged.getLast().end < interval.start){
                merged.add(interval);
            }
            else{
                merged.getLast().end = Math.max(merged.getLast().end, interval.end);
            }
        }
      
        return merged;
    }
}
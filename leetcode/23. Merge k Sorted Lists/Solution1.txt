Time Complexity: nlogk where k is the number of lists and n is total number of nodes.

Space Complexity: 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        int length = lists.length;
        
        return helper(lists, 0, length - 1);
        
        
    }
    
    private ListNode helper(ListNode[] lists, int start, int end){
        if(start == end){
            return lists[start];
        }
        else if (start < end){
            int mid = start + ((end - start) / 2);
            ListNode left = helper(lists, start, mid);
            ListNode right = helper(lists, mid + 1, end);
            return merge(left, right);
        }
        else{
            return null;
        }
    }
    
    private ListNode merge(ListNode l1, ListNode l2){
        if(l1 == null){
            return l2;
        }
        else if (l2 == null){
            return l1;
        }
        else if(l1.val < l2.val){
            l1.next = merge(l1.next, l2);
            return l1;
        }
        else{
            l2.next = merge(l1, l2.next);
            return l2;
        }
    }
}
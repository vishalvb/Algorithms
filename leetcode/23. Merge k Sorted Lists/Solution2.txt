Explanation: in the merging of 2 list, this solution uses iterative approach

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        int length = lists.length;
        
        return helper(lists, 0, length - 1);
        
        
    }
    
    private ListNode helper(ListNode[] lists, int start, int end){
        if(start == end){
            return lists[start];
        }
        else if (start < end){
            int mid = start + ((end - start) / 2);
            ListNode left = helper(lists, start, mid);
            ListNode right = helper(lists, mid + 1, end);
            return merge(left, right);
        }
        else{
            return null;
        }
    }
    
    private ListNode merge(ListNode l1, ListNode l2){
        ListNode head = new ListNode(0);
        ListNode dummy = head;
        while(l1 != null && l2!= null){
            if(l1.val < l2.val){
                head.next = l1;
                l1 = l1.next;
            }
            else{
                head.next = l2;
                l2 = l2.next;
            }
            head = head.next;
        }
        if(l1 != null){
            head.next = l1;    
        }
        else{
            head.next = l2;
        }
        
        return dummy.next;
    }
}